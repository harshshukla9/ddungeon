/* eslint-disable @eslint-community/eslint-comments/disable-enable-pair -- auto generated */

/* eslint-disable @eslint-community/eslint-comments/no-unlimited-disable  -- auto generated */

/* eslint-disable -- auto generated  */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/__root';
import { Route as ProfileImport } from './app/profile';
import { Route as GameImport } from './app/game';
import { Route as IndexImport } from './app/index';

// Create/Update Routes

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any);

const GameRoute = GameImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/game': {
      id: '/game';
      path: '/game';
      fullPath: '/game';
      preLoaderRoute: typeof GameImport;
      parentRoute: typeof rootRoute;
    };
    '/profile': {
      id: '/profile';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof ProfileImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/game': typeof GameRoute;
  '/profile': typeof ProfileRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/game': typeof GameRoute;
  '/profile': typeof ProfileRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/game': typeof GameRoute;
  '/profile': typeof ProfileRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/game' | '/profile';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/game' | '/profile';
  id: '__root__' | '/' | '/game' | '/profile';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  GameRoute: typeof GameRoute;
  ProfileRoute: typeof ProfileRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GameRoute: GameRoute,
  ProfileRoute: ProfileRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/game",
        "/profile"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/game": {
      "filePath": "game.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
